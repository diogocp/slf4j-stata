import java.nio.channels.Channels
import java.nio.channels.ReadableByteChannel
import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.Path
import java.text.SimpleDateFormat

// Download the stata-sfi.jar from Stata 13 by default
ext.stataVersion = 13

tasks.compileJava.dependsOn {
    if (fileTree(dir: "libs/", include: "stata-sfi-" + stataVersion + ".*.jar").isEmpty()) {
        downloadStataSfi
    }
}

task('downloadStataSfi') {
    doLast {
        Date adoDate = getAdoDate(stataVersion)
        Path zipFile = downloadAdoZip(stataVersion, adoDate)

        String isoDate = new SimpleDateFormat("yyyyMMdd", Locale.US).format(adoDate)
        String jarName = String.format("stata-sfi-%s.%s.jar", stataVersion, isoDate)

        FileSystem zipFs = FileSystems.newFileSystem(zipFile, null)
        Files.copy(zipFs.getPath("stata-sfi.jar"), Paths.get("libs/" + jarName))
        zipFile.toFile().delete()
    }
}

private static String getStataUpdatesUrl(int stataVersion) {
    if (stataVersion < 13) {
        throw new RuntimeException("Stata version must be at least 13")
    }
    return String.format("https://www.stata.com/updates%d", stataVersion - 5)
}

private static Date getAdoDate(int stataVersion) {
    String url = getStataUpdatesUrl(stataVersion) + "/ado/update"
    String adoDate = new URL(url).text.replaceAll(/\s/, "")

    return new SimpleDateFormat("ddMMMyyyy", Locale.US).parse(adoDate)
}

private static URL getAdoUrl(int stataVersion, Date adoDate) {
    String url = getStataUpdatesUrl(stataVersion) + "/ado/ado_%s.zip"
    String date = new SimpleDateFormat("ddMMMyyyy", Locale.US).format(adoDate)

    return new URL(String.format(url, date))
}

private static URL getAdoUrl(int stataVersion) {
    return getAdoUrl(stataVersion, getAdoDate(stataVersion))
}

private static Path downloadAdoZip(int stataVersion, Date adoDate) {
    URL adoUrl = getAdoUrl(stataVersion, adoDate)
    ReadableByteChannel rbc = Channels.newChannel(adoUrl.openStream())
    Path zipFile = Files.createTempFile("ado_", ".zip")
    FileOutputStream fos = new FileOutputStream(zipFile.toFile())
    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE)

    return zipFile
}
